// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  OWNER
  MANAGER
  TENANT
}

enum MaintenanceUrgency {
  LOW
  MEDIUM
  HIGH
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  RENEWED
  TERMINATED
}

enum TransactionType {
  RENT
  DEPOSIT
  FEE
  MAINTENANCE
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String?   @unique
  phone     String    @unique
  password  String
  role      UserRole
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  tenant    Tenant?
  owner     Owner?
  manager   Manager?
  accounts  Account[]
  sessions  Session[]
}

model Tenant {
  id                  String               @id @default(uuid())
  isActive            Boolean
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userId              String               @unique
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  leases              LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  transactions        Transaction[]
}

model Owner {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  properties Property[]
}

model Manager {
  id                 String     @id @default(uuid())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userId             String     @unique
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedProperties Property[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id          String   @id @default(uuid())
  name        String
  type        String
  city        String
  district    String
  street      String
  address     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  managerId   String?
  manager     Manager? @relation(fields: [managerId], references: [id], onDelete: Cascade)
  ownerId     String
  owner       Owner    @relation(fields: [ownerId], references: [id])
  units       Unit[]
}

model Unit {
  id                  String               @id @default(uuid())
  name                String
  description         String
  size                Float
  price               Float
  rooms               Int
  kitchen             Boolean
  bathroom            Boolean
  livingRoom          Boolean
  balcony             Boolean
  parking             Boolean
  isOccupied          Boolean
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  propertyId          String
  property            Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  leases              LeaseAgreement[]
  maintenanceRequests MaintenanceRequest[]
  transactions        Transaction[]
}

model LeaseAgreement {
  id        String      @id @default(uuid())
  startDate DateTime
  endDate   DateTime
  status    LeaseStatus
  document  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  tenantId  String
  tenant    Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId    String
  unit      Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model Transaction {
  id        String          @id @default(uuid())
  type      TransactionType @default(RENT)
  amount    Float
  date      DateTime
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  tenantId  String
  tenant    Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  unitId    String
  unit      Unit            @relation(fields: [unitId], references: [id], onDelete: Cascade)
}

model MaintenanceRequest {
  id          String             @id @default(uuid())
  title       String
  description String
  urgency     MaintenanceUrgency @default(LOW)
  status      MaintenanceStatus  @default(PENDING)
  submittedAt DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  resolvedAt  DateTime?
  unitId      String
  unit        Unit               @relation(fields: [unitId], references: [id], onDelete: Cascade)
  tenantId    String
  tenant      Tenant             @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}
